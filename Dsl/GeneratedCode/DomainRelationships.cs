//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace BotFrameworkDsl
{
	/// <summary>
	/// DomainRelationship BotFrameworkModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("BotFrameworkDsl.BotFrameworkModelHasElements.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BotFrameworkDsl.BotFrameworkModelHasElements.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0d8feee7-826c-4774-83ac-61642a338bf0")]
	public partial class BotFrameworkModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BotFrameworkModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d8feee7, 0x826c, 0x4774, 0x83, 0xac, 0x61, 0x64, 0x2a, 0x33, 0x8b, 0xf0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BotFrameworkModelHasElements link in the same Partition as the given BotFrameworkModel
		/// </summary>
		/// <param name="source">BotFrameworkModel to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public BotFrameworkModelHasElements(BotFrameworkModel source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BotFrameworkModelHasElements.BotFrameworkModelDomainRoleId, source), new DslModeling::RoleAssignment(BotFrameworkModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BotFrameworkModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BotFrameworkModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BotFrameworkModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BotFrameworkModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BotFrameworkModel domain role code
		
		/// <summary>
		/// BotFrameworkModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BotFrameworkModelDomainRoleId = new global::System.Guid(0x0a50e422, 0xe318, 0x4fb6, 0x89, 0x55, 0xf1, 0x18, 0x91, 0x8d, 0x89, 0x9d);
		
		/// <summary>
		/// DomainRole BotFrameworkModel
		/// </summary>
		[DslDesign::DisplayNameResource("BotFrameworkDsl.BotFrameworkModelHasElements/BotFrameworkModel.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BotFrameworkDsl.BotFrameworkModelHasElements/BotFrameworkModel.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="BotFrameworkDsl.BotFrameworkModelHasElements/BotFrameworkModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a50e422-e318-4fb6-8955-f118918d899d")]
		public virtual BotFrameworkModel BotFrameworkModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BotFrameworkModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BotFrameworkModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BotFrameworkModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BotFrameworkModel of a Node
		/// <summary>
		/// Gets BotFrameworkModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BotFrameworkModel GetBotFrameworkModel(Node element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as BotFrameworkModel;
		}
		
		/// <summary>
		/// Sets BotFrameworkModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBotFrameworkModel(Node element, BotFrameworkModel newBotFrameworkModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newBotFrameworkModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xdaa2a83b, 0x8434, 0x4c3b, 0xa7, 0x9a, 0x92, 0x9e, 0xa4, 0x9c, 0x6e, 0x9c);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("BotFrameworkDsl.BotFrameworkModelHasElements/Element.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BotFrameworkDsl.BotFrameworkModelHasElements/Element.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BotFrameworkModel", PropertyDisplayNameKey="BotFrameworkDsl.BotFrameworkModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("daa2a83b-8434-4c3b-a79a-929ea49c6e9c")]
		public virtual Node Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a BotFrameworkModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetElements(BotFrameworkModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, BotFrameworkModelDomainRoleId);
		}
		#endregion
		#region BotFrameworkModel link accessor
		/// <summary>
		/// Get the list of BotFrameworkModelHasElements links to a BotFrameworkModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BotFrameworkDsl.BotFrameworkModelHasElements> GetLinksToElements ( global::BotFrameworkDsl.BotFrameworkModel botFrameworkModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.BotFrameworkModelHasElements>(botFrameworkModelInstance, global::BotFrameworkDsl.BotFrameworkModelHasElements.BotFrameworkModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the BotFrameworkModelHasElements link to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BotFrameworkDsl.BotFrameworkModelHasElements GetLinkToBotFrameworkModel (global::BotFrameworkDsl.Node elementInstance)
		{
			global::System.Collections.Generic.IList<global::BotFrameworkDsl.BotFrameworkModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.BotFrameworkModelHasElements>(elementInstance, global::BotFrameworkDsl.BotFrameworkModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BotFrameworkModelHasElements instance accessors
		
		/// <summary>
		/// Get any BotFrameworkModelHasElements links between a given BotFrameworkModel and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BotFrameworkDsl.BotFrameworkModelHasElements> GetLinks( global::BotFrameworkDsl.BotFrameworkModel source, global::BotFrameworkDsl.Node target )
		{
			global::System.Collections.Generic.List<global::BotFrameworkDsl.BotFrameworkModelHasElements> outLinks = new global::System.Collections.Generic.List<global::BotFrameworkDsl.BotFrameworkModelHasElements>();
			global::System.Collections.Generic.IList<global::BotFrameworkDsl.BotFrameworkModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.BotFrameworkModelHasElements>(source, global::BotFrameworkDsl.BotFrameworkModelHasElements.BotFrameworkModelDomainRoleId);
			foreach ( global::BotFrameworkDsl.BotFrameworkModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BotFrameworkModelHasElements link between a given BotFrameworkModeland a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BotFrameworkDsl.BotFrameworkModelHasElements GetLink( global::BotFrameworkDsl.BotFrameworkModel source, global::BotFrameworkDsl.Node target )
		{
			global::System.Collections.Generic.IList<global::BotFrameworkDsl.BotFrameworkModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.BotFrameworkModelHasElements>(source, global::BotFrameworkDsl.BotFrameworkModelHasElements.BotFrameworkModelDomainRoleId);
			foreach ( global::BotFrameworkDsl.BotFrameworkModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BotFrameworkDsl
{
	/// <summary>
	/// DomainRelationship NodeReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("BotFrameworkDsl.NodeReferencesTargets.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BotFrameworkDsl.NodeReferencesTargets.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9f4ec840-7741-417f-9352-4f4514347312")]
	public partial class NodeReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NodeReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f4ec840, 0x7741, 0x417f, 0x93, 0x52, 0x4f, 0x45, 0x14, 0x34, 0x73, 0x12);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NodeReferencesTargets link in the same Partition as the given Node
		/// </summary>
		/// <param name="source">Node to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public NodeReferencesTargets(Node source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NodeReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(NodeReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xbb4de6d5, 0xb01b, 0x4fd7, 0xbb, 0x18, 0xe1, 0x06, 0x55, 0xfd, 0xdc, 0xaa);
		
		/// <summary>
		/// DomainRole Source
		/// Description for BotFrameworkDsl.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("BotFrameworkDsl.NodeReferencesTargets/Source.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BotFrameworkDsl.NodeReferencesTargets/Source.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="BotFrameworkDsl.NodeReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb4de6d5-b01b-4fd7-bb18-e10655fddcaa")]
		public virtual Node Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Node
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetSources(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xd7528946, 0x07ed, 0x43a8, 0x94, 0xbe, 0x63, 0x1a, 0x5c, 0x69, 0xdc, 0x4d);
		
		/// <summary>
		/// DomainRole Target
		/// Description for BotFrameworkDsl.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("BotFrameworkDsl.NodeReferencesTargets/Target.DisplayName", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BotFrameworkDsl.NodeReferencesTargets/Target.Description", typeof(global::BotFrameworkDsl.BotFrameworkDslDomainModel), "BotFrameworkDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="BotFrameworkDsl.NodeReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d7528946-07ed-43a8-94be-631a5c69dc4d")]
		public virtual Node Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Node
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetTargets(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of NodeReferencesTargets links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BotFrameworkDsl.NodeReferencesTargets> GetLinksToTargets ( global::BotFrameworkDsl.Node sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.NodeReferencesTargets>(sourceInstance, global::BotFrameworkDsl.NodeReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of NodeReferencesTargets links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BotFrameworkDsl.NodeReferencesTargets> GetLinksToSources ( global::BotFrameworkDsl.Node targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.NodeReferencesTargets>(targetInstance, global::BotFrameworkDsl.NodeReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region NodeReferencesTargets instance accessors
		
		/// <summary>
		/// Get any NodeReferencesTargets links between a given Node and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BotFrameworkDsl.NodeReferencesTargets> GetLinks( global::BotFrameworkDsl.Node source, global::BotFrameworkDsl.Node target )
		{
			global::System.Collections.Generic.List<global::BotFrameworkDsl.NodeReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::BotFrameworkDsl.NodeReferencesTargets>();
			global::System.Collections.Generic.IList<global::BotFrameworkDsl.NodeReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.NodeReferencesTargets>(source, global::BotFrameworkDsl.NodeReferencesTargets.SourceDomainRoleId);
			foreach ( global::BotFrameworkDsl.NodeReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NodeReferencesTargets link between a given Nodeand a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BotFrameworkDsl.NodeReferencesTargets GetLink( global::BotFrameworkDsl.Node source, global::BotFrameworkDsl.Node target )
		{
			global::System.Collections.Generic.IList<global::BotFrameworkDsl.NodeReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BotFrameworkDsl.NodeReferencesTargets>(source, global::BotFrameworkDsl.NodeReferencesTargets.SourceDomainRoleId);
			foreach ( global::BotFrameworkDsl.NodeReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
